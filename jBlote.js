// Generated by CoffeeScript 1.3.3
(function() {
  var Blote;

  Blote = (function() {

    function Blote(args) {
      this.raw_html = "";
      this.end_tags = "";
    }

    Blote.prototype.inj = function(text) {
      this.raw_html += text;
      return this;
    };

    Blote.prototype.literal = function(text) {
      this.raw_html += text;
      return this;
    };

    Blote.prototype["export"] = function() {
      return this.raw_html + this.end_tags;
    };

    Blote.prototype.a = function(options) {
      return this.open_tag('a', options);
    };

    Blote.prototype.abbr = function(options) {
      return this.open_tag('abbr', options);
    };

    Blote.prototype.acronym = function(options) {
      return this.open_tag('acronym', options);
    };

    Blote.prototype.address = function(options) {
      return this.open_tag('address', options);
    };

    Blote.prototype.applet = function(options) {
      return this.open_tag('applet', options);
    };

    Blote.prototype.area = function(options) {
      return this.open_tag('area', options);
    };

    Blote.prototype.article = function(options) {
      return this.open_tag('article', options);
    };

    Blote.prototype.aside = function(options) {
      return this.open_tag('aside', options);
    };

    Blote.prototype.audio = function(options) {
      return this.open_tag('audio', options);
    };

    Blote.prototype.b = function() {
      return this.simple_tag('b');
    };

    Blote.prototype.base = function(options) {
      return this.open_tag('base', options);
    };

    Blote.prototype.bdi = function(options) {
      return this.open_tag('bdi', options);
    };

    Blote.prototype.bdo = function(options) {
      return this.open_tag('bdo', options);
    };

    Blote.prototype.big = function(options) {
      return this.open_tag('big', options);
    };

    Blote.prototype.blockquote = function(options) {
      return this.open_tag('blockquote', options);
    };

    Blote.prototype.body = function(options) {
      return this.open_tag('body', options);
    };

    Blote.prototype.body = function(options) {
      return this.open_tag('body', options);
    };

    Blote.prototype.br = function(options) {
      return this.simple_tag('br');
    };

    Blote.prototype.button = function(options) {
      return this.open_tag('button', options);
    };

    Blote.prototype.canvas = function(options) {
      return this.open_tag('canvas', options);
    };

    Blote.prototype.caption = function(options) {
      return this.open_tag('caption', options);
    };

    Blote.prototype.center = function(options) {
      return this.open_tag('center', options);
    };

    Blote.prototype.cite = function(options) {
      return this.open_tag('cite', options);
    };

    Blote.prototype.code = function(options) {
      return this.open_tag('code', options);
    };

    Blote.prototype.col = function(options) {
      return this.open_tag('col', options);
    };

    Blote.prototype.colgroup = function(options) {
      return this.open_tag('colgroup', options);
    };

    Blote.prototype.command = function(options) {
      return this.open_tag('command', options);
    };

    Blote.prototype.datalist = function(options) {
      return this.open_tag('datalist', options);
    };

    Blote.prototype.dd = function(options) {
      return this.open_tag('dd', options);
    };

    Blote.prototype.del = function(options) {
      return this.open_tag('del', options);
    };

    Blote.prototype.details = function(options) {
      return this.open_tag('details', options);
    };

    Blote.prototype.dfn = function(options) {
      return this.open_tag('dfn', options);
    };

    Blote.prototype.dir = function(options) {
      return this.open_tag('dir', options);
    };

    Blote.prototype.div = function(options) {
      return this.open_tag('div', options);
    };

    Blote.prototype.dl = function(options) {
      return this.open_tag('dl', options);
    };

    Blote.prototype.dt = function(options) {
      return this.open_tag('dt', options);
    };

    Blote.prototype.em = function(options) {
      return this.open_tag('em', options);
    };

    Blote.prototype.embed = function(options) {
      return this.open_tag('embed', options);
    };

    Blote.prototype.fieldset = function(options) {
      return this.open_tag('fieldset', options);
    };

    Blote.prototype.figcaption = function(options) {
      return this.open_tag('figcaption', options);
    };

    Blote.prototype.figure = function(options) {
      return this.open_tag('figure', options);
    };

    Blote.prototype.font = function(options) {
      return this.open_tag('font', options);
    };

    Blote.prototype.footer = function(options) {
      return this.open_tag('footer', options);
    };

    Blote.prototype.form = function(options) {
      return this.open_tag('form', options);
    };

    Blote.prototype.frame = function(options) {
      return this.open_tag('frame', options);
    };

    Blote.prototype.frameset = function(options) {
      return this.open_tag('frameset', options);
    };

    Blote.prototype.h1 = function(options) {
      return this.open_tag('h1', options);
    };

    Blote.prototype.h2 = function(options) {
      return this.open_tag('h2', options);
    };

    Blote.prototype.h3 = function(options) {
      return this.open_tag('h3', options);
    };

    Blote.prototype.h4 = function(options) {
      return this.open_tag('h4', options);
    };

    Blote.prototype.h5 = function(options) {
      return this.open_tag('h5', options);
    };

    Blote.prototype.h6 = function(options) {
      return this.open_tag('h6', options);
    };

    Blote.prototype.head = function(options) {
      return this.open_tag('head', options);
    };

    Blote.prototype.header = function(options) {
      return this.open_tag('header', options);
    };

    Blote.prototype.hgroup = function(options) {
      return this.open_tag('hgroup', options);
    };

    Blote.prototype.hr = function(options) {
      return this.open_tag('hr', options);
    };

    Blote.prototype.html = function(options) {
      return this.open_tag('html', options);
    };

    Blote.prototype.i = function(options) {
      return this.open_tag('i', options);
    };

    Blote.prototype.iframe = function(options) {
      return this.open_tag('iframe', options);
    };

    Blote.prototype.img = function(options) {
      return this.open_tag('img', options);
    };

    Blote.prototype.input = function(options) {
      return this.open_tag('input', options);
    };

    Blote.prototype.ins = function(options) {
      return this.open_tag('ins', options);
    };

    Blote.prototype.keygen = function(options) {
      return this.open_tag('keygen', options);
    };

    Blote.prototype.kbd = function(options) {
      return this.open_tag('kbd', options);
    };

    Blote.prototype.label = function(options) {
      return this.open_tag('label', options);
    };

    Blote.prototype.legend = function(options) {
      return this.open_tag('legend', options);
    };

    Blote.prototype.li = function(options) {
      return this.open_tag('li', options);
    };

    Blote.prototype.link = function(options) {
      return this.open_tag('link', options);
    };

    Blote.prototype.map = function(options) {
      return this.open_tag('map', options);
    };

    Blote.prototype.mark = function(options) {
      return this.open_tag('mark', options);
    };

    Blote.prototype.menu = function(options) {
      return this.open_tag('menu', options);
    };

    Blote.prototype.meta = function(options) {
      return this.open_tag('meta', options);
    };

    Blote.prototype.meter = function(options) {
      return this.open_tag('meter', options);
    };

    Blote.prototype.nav = function(options) {
      return this.open_tag('nav', options);
    };

    Blote.prototype.noframes = function(options) {
      return this.open_tag('noframes', options);
    };

    Blote.prototype.noscript = function(options) {
      return this.open_tag('noscript', options);
    };

    Blote.prototype.object = function(options) {
      return this.open_tag('object', options);
    };

    Blote.prototype.ol = function(options) {
      return this.open_tag('ol', options);
    };

    Blote.prototype.optgroup = function(options) {
      return this.open_tag('optgroup', options);
    };

    Blote.prototype.option = function(options) {
      return this.open_tag('option', options);
    };

    Blote.prototype.output = function(options) {
      return this.open_tag('output', options);
    };

    Blote.prototype.p = function(options) {
      return this.open_tag('p', options);
    };

    Blote.prototype.param = function(options) {
      return this.open_tag('param', options);
    };

    Blote.prototype.pre = function(options) {
      return this.open_tag('pre', options);
    };

    Blote.prototype.progress = function(options) {
      return this.open_tag('progress', options);
    };

    Blote.prototype.q = function(options) {
      return this.open_tag('q', options);
    };

    Blote.prototype.rp = function(options) {
      return this.open_tag('rp', options);
    };

    Blote.prototype.rt = function(options) {
      return this.open_tag('rt', options);
    };

    Blote.prototype.ruby = function(options) {
      return this.open_tag('ruby', options);
    };

    Blote.prototype.s = function(options) {
      return this.open_tag('s', options);
    };

    Blote.prototype.samp = function(options) {
      return this.open_tag('samp', options);
    };

    Blote.prototype.script = function(options) {
      return this.open_tag('script', options);
    };

    Blote.prototype.section = function(options) {
      return this.open_tag('section', options);
    };

    Blote.prototype.select = function(options) {
      return this.open_tag('select', options);
    };

    Blote.prototype.small = function(options) {
      return this.open_tag('small', options);
    };

    Blote.prototype.source = function(options) {
      return this.open_tag('source', options);
    };

    Blote.prototype.span = function(options) {
      return this.open_tag('span', options);
    };

    Blote.prototype.strike = function(options) {
      return this.open_tag('strike', options);
    };

    Blote.prototype.strong = function(options) {
      return this.open_tag('strong', options);
    };

    Blote.prototype.style = function(options) {
      return this.open_tag('style', options);
    };

    Blote.prototype.sub = function(options) {
      return this.open_tag('sub', options);
    };

    Blote.prototype.summary = function(options) {
      return this.open_tag('summary', options);
    };

    Blote.prototype.sup = function(options) {
      return this.open_tag('sup', options);
    };

    Blote.prototype.table = function(options) {
      return this.open_tag('table', options);
    };

    Blote.prototype.tbody = function(options) {
      return this.open_tag('tbody', options);
    };

    Blote.prototype.td = function(options) {
      return this.open_tag('td', options);
    };

    Blote.prototype.textarea = function(options) {
      return this.open_tag('body', options);
    };

    Blote.prototype.tfoot = function(options) {
      return this.open_tag('tfoot', options);
    };

    Blote.prototype.th = function(options) {
      return this.open_tag('th', options);
    };

    Blote.prototype.thead = function(options) {
      return this.open_tag('thead', options);
    };

    Blote.prototype.time = function(options) {
      return this.open_tag('time', options);
    };

    Blote.prototype.title = function(options) {
      return this.open_tag('title', options);
    };

    Blote.prototype.tr = function(options) {
      return this.open_tag('tr', options);
    };

    Blote.prototype.track = function(options) {
      return this.open_tag('track', options);
    };

    Blote.prototype.tt = function(options) {
      return this.open_tag('tt', options);
    };

    Blote.prototype.u = function(options) {
      return this.open_tag('u', options);
    };

    Blote.prototype["var"] = function(options) {
      return this.open_tag('var', options);
    };

    Blote.prototype.video = function(options) {
      return this.open_tag('video', options);
    };

    Blote.prototype.wbr = function(options) {
      return this.open_tag('wbr', options);
    };

    Blote.prototype.simple_tag = function(tag_name) {
      this.raw_html += "<" + tag_name + " />";
      return this;
    };

    Blote.prototype.open_tag = function(tag_name, options) {
      this.raw_html += "<" + tag_name;
      this.raw_html += this.apply_options(options);
      this.raw_html += ">";
      this.end_tags = this.close_tag(tag_name) + this.end_tags;
      return this;
    };

    Blote.prototype.close_tag = function(tag_name) {
      return "</" + tag_name + ">";
    };

    Blote.prototype.apply_options = function(options) {
      var key, text, value;
      text = "";
      for (key in options) {
        value = options[key];
        text += " " + key + "=\"" + value + "\"";
      }
      return text;
    };

    Blote.prototype.null_or_empty = function(x) {
      return x === null || x === "" || x === void 0;
    };

    return Blote;

  })();

  window.Blote = function() {
    return new Blote;
  };

}).call(this);
